nextflow_process {

    name "Test Process ABRICATE_SUMMARY"
    script "../main.nf"
    process "ABRICATE_SUMMARY"
    tag "modules"
    tag "modules_nfcore"
    tag "abricate"
    tag "abricate/summary"
    tag "abricate/run"

    test("Multiple reports - summary bacteroides_fragilis and haemophilus_influenzae") {

        setup {
            run("ABRICATE_RUN") {
                script "../../run/main.nf"
                process {
                    """
                    input[0] = Channel.fromList([
                        [
                            [ id:'test1' ],
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists: true)
                        ],
                        [
                            [ id:'test2' ],
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/haemophilus_influenzae/genome/genome.fna.gz', checkIfExists: true)
                        ]
                    ])
                    input[1] = []
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = ABRICATE_RUN.out.report
                    .collect{ meta, report -> report }
                    .map{ report -> [ [ id: 'test_summary'], report ] }
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out,
                path(process.out.versions[0]).yaml
            ).match()
        }
    }

    test("Single report -- stub") {
        options "-stub"

        when {
            process {
                """
                input[0] = [ [ id: 'test_summary'], [] ]
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out,
                path(process.out.versions[0]).yaml
            ).match()
        }
    }
}
